# -*- coding: utf-8 -*-
"""
This file is part of SPIL, The Simple Pipeline Lib.

(C) copyright 2019-2021 Michael Haussmann, spil@xeo.info

SPIL is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

SPIL is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with SPIL.
If not, see <https://www.gnu.org/licenses/>.

"""

"""
This is a utility to create a Sid List File from a given Sid list. 

Important: this makes only sense if the given Sids are generated by a script.

To obtain Example Sids by parsing the existing files, use parse_sid_files.py.

"""

from pathlib import Path


def sid_file_path():

    from spil import Sid, SpilException
    from spil.conf import projects

    projects_root = Path(Sid(projects[0]).path)  # .parent
    print('[sid_file_path] Root path : {}'.format(projects_root))

    sid_file = projects_root / 'sids.test.txt'

    if not projects_root.exists():
        raise SpilException('The root directory for Sids does not exist. Test aborted. See "project_root" in "fs_conf" configuration. Currently set to {}'.format(projects_root))

    return sid_file


def write_sids_to_file(sids, sid_file):
    """
    This function writes given Sids to the given Sid file
    (EOL separated file = one Sid string per line).

    Important: this makes only sense if the Example Sids are generated by a script.

    To obtain Example Sids by parsing the existing files, use parse_sid_files.py.
    """
    sid_file = Path(sid_file)

    if sid_file.exists():
        raise Exception('The test file "{}" already exists. Skipped'.format(sid_file))

    with open(str(sid_file), 'w') as f:
        for sid in sids:
            f.write(str(sid) + '\n')

    print('Written {} Sids to {}'.format(len(sids), sid_file))


if __name__ == '__main__':

    print('Generating Example Sids. This can take some time.')
    from scripts.example_sids import sids  # generates the sids - potentially long loop

    sid_file = sid_file_path()

    write_sids_to_file(sids, sid_file)

    print('Done.')